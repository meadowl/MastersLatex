#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass kuthesis
\begin_preamble
%%\usepackage{latexsym}
\usepackage{graphicx}

%%\usepackage{psfig}
%%\usepackage{color}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{ragged2e}
\RaggedRight
%\setlength{\parindent}{1.5 em}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{example}{Verbatim}{fontsize=\small}
\newcommand{\ignore}[1]{}

\usepackage{fvextra}
\end_preamble
\use_default_options false
\master ../thesis-ku.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=none,xleftmargin=2pt,stepnumber=1,numbers=left,numbersep=5pt,numberstyle={\ttfamily\tiny\color[gray]{0.3}},belowcaptionskip={\bigskipamount},captionpos=b,escapeinside={*'}{'*},language=Haskell,tabsize=2,emphstyle={\bf},commentstyle={\it},stringstyle={\mdseries\rmfamily},showspaces=false,keywordstyle={\bfseries\rmfamily},columns=flexible,basicstyle={\small\sffamily},showstringspaces=false,morecomment={[l]\%}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
The Remote Monad
\end_layout

\begin_layout Standard
The purpose of this chapter is to expand past covering the mathematical
 background and the historical Haskell programming context.
 In this primary article will show both an introduction to remote lenses
 as well as their implementation with the 
\emph on
Remote Monad
\emph default
.
 As described the two primary components of both programmatic and mathematical
 lenses are the 
\emph on
Set
\emph default
 and 
\emph on
View 
\emph default
which produce as a result of applying them both at the same time a command
 referenced as 
\emph on
Over
\emph default
.
 This now allows us to describe a variation that copies on the structure
 and intent of these operators over a remote connection between a client
 and a host device, the host running Haskell and the client running some
 other language.
 This variation which is the main subject of study of this paper will be
 referred to as the 
\emph on
Remote Lens
\emph default
 and will be fleshed out starting now and until the end of this manuscript.
 (Clean up this sentence structure)
\end_layout

\begin_layout Standard
To define the individual components of 
\emph on
Remote Lenses
\emph default
, we begin by providing the relevant abstract type definitions below.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

RemoteView :: (String -> String) -> (Wrapped a) -> (ReturnType b)
\end_layout

\begin_layout Plain Layout

RemoteSet :: (String -> String) -> String -> (Wrapped a) -> ReturnType (Wrapped
 a)
\end_layout

\begin_layout Plain Layout

RemoteOver :: (String -> String) -> (t -> a) -> (Wrapped a) -> ReturnType
 (Wrapped a)
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We extend the abstract syntax these modifications to the original well-formed
 lens rules, provided in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Remote-Lens-Laws"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{gather*}
RemoteSet(acc\:\,RemoteView(acc\,\:obj)\:\,obj)\,\:\equiv\:\,obj\\
RemoteView(acc\,\:RemoteSet(acc\,\,item\:\,obj))\,\:\equiv\:\,item\\
RemoteSet(acc\,\:item\,\:obj)\,\:;\,\:RemoteSet(acc\:\,item2\,\:obj)\:\,\equiv\,\:RemoteSet(acc\,\:item2\,\:obj)
\end{gather*}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Remote Lens Laws
\begin_inset CommandInset label
LatexCommand label
name "fig:Remote-Lens-Laws"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\paragraph_spacing single
\noindent
\align center
Where 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $;$
\end_inset


\begin_inset Quotes erd
\end_inset

 denotes the sequence of operation and 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\equiv$
\end_inset


\begin_inset Quotes erd
\end_inset

 denotes congruence but not equality.
 
\end_layout

\begin_layout Plain Layout
\paragraph_spacing single
\noindent
\align center
Where 
\begin_inset Quotes eld
\end_inset


\emph on
acc
\emph default

\begin_inset Quotes erd
\end_inset

 is the accessor to the structure, 
\begin_inset Quotes eld
\end_inset


\emph on
obj
\emph default

\begin_inset Quotes erd
\end_inset

 is the structure, and 
\begin_inset Quotes eld
\end_inset


\emph on
item
\emph default

\begin_inset Quotes erd
\end_inset

 is some substructure.
\end_layout

\begin_layout Plain Layout
\paragraph_spacing single
\noindent
\align center
Where these laws show the View-Set Eq.
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, Set-View Eq.
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, Set-Set Eq.
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:3-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The essentials of what is required is aptly similar to the definitions seen
 in the elementary Prelude construction of Haskell lenses.
 With that in mind, the first argument typically taken by any lens operator
 is a function that will access a deep rooted parameter inside of a structure.
 In the same vein, the
\emph on
 Remote Lens
\emph default
 variant accomplishes this with an abstraction of the 
\emph on
Remote Object's
\emph default
 nested fields that are to be queried into once the command is sent from
 host to client.
 The primary difference in how this is handled by Haskell, is that rather
 than simply pattern matching into the already existing structure, a completely
 different approach is needed instead.
\end_layout

\begin_layout Standard
This approach is best summarized as a conflict between the fundamental methods
 used in typical lens methods that rely strongly on internal pattern matching
 for the composability of lens, and the existence of a remote connection
 that prevents that internal pattern matching to take place.
 This can be essentially thought of any scenario where accessing a structure
 isn't possible inside of the host system, and the necessity to query a
 client system takes place.
 This is further illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Remote-Diagrams"
plural "false"
caps "false"
noprefix "false"

\end_inset

 where it might be distinguished from the much similar local implementation
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagram of Lens Composition"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename RemoteLensDiagram.png

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename RemoteLensDiagram2.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Remote Diagrams
\begin_inset CommandInset label
LatexCommand label
name "fig:Remote-Diagrams"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will involve internally concatenating a conjointment of the parameter.
 Each of the parameters that normally would be accessed with a composition
 of pattern matching functions, must instead be accessed with a composition
 of the 
\emph on
Remote Object's
\emph default
 internal parameters.
 It is fair and equally valid to imagine representing the target object
 as a remote record with the means to access the contents completely dependent
 on how that record was implemented inside of the client's language.
\end_layout

\begin_layout Standard
Another shared argument is the structure that will be accessed by the lens
 operator.
 Similarly, what is passed around in the 
\emph on
Remote Lens
\emph default
 is a reference to the location of what is to be accessed upon sending the
 constructed command.
 For these reasons directly accessing the information is not possible, since
 one is manipulating only a reference to the actual object on the client's
 side.
 That the careful composition method mentioned in the former paragraph was
 needed.
 Given that bundling the reference to the 
\emph on
Remote Object
\emph default
 along with the preformed command to operate on the 
\emph on
Remote Object
\emph default
 are absolutely necessary, otherwise none of the methods to view or alter
 the contents of that structure are at all possible to create.
 (Try to rewrite these sentences to flow better)
\end_layout

\begin_layout Standard
The final shared parameter is the return type from the result of applying
 the lens operator to the structure that one is inspecting.
 This is also represented by the 
\emph on
Remote Lens's
\emph default
 return type, where for a 
\noun on
RemoteView
\noun default
 the return type will be the desired queried item wrapped in the remote
 operator that allowed for the operation to take place and for 
\noun on
RemoteSet
\noun default
/
\noun on
RemoteOver
\noun default
 the return type will be the reference to the altered structure wrapped
 up in the same remote operator.
 The only major consideration when manipulating the returned structure,
 is that one must assign the type of the expected viewed parameter or trust
 that there is sufficient information that Haskell can self-interpret the
 type for itself.
\end_layout

\begin_layout Standard
Now it becomes possible to introduce the primary example that this manuscript
 will cover, specifically the 
\emph on
Remote Lens
\emph default
 as it relates to the 
\emph on
Remote Monad 
\emph default
the construction of it's key functions represented by the following types.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteView :: (FromJSON b) => (String -> String) -> (RemoteValue a) -> (RemoteMo
nad b)
\end_layout

\begin_layout Plain Layout

RemoteSet :: (String -> String) -> String -> (RemoteValue a) -> RemoteMonad
 (RemoteValue a)
\end_layout

\begin_layout Plain Layout

RemoteOver :: (FromJSON t, Show a) => (String -> String) -> (t -> a) ->
 (RemoteValue a) -> RemoteMonad (RemoteValue a)
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These are the types for the set of functions that seek to emulate the methods
 of 
\emph on
View
\emph default
, 
\emph on
Set
\emph default
, and 
\emph on
Over
\emph default
 that have been instantiated specifically for a 
\emph on
Remote Lens
\emph default
 based on using the 
\emph on
Remote Monad
\emph default
.
 Despite that they do not share the same internal structure of their locally
 implemented counterparts, that in their behavior they will accomplish the
 same goal, which is to resolve standard dictionary manipulation.
 This wrapper style may not have been used by others, but it is specifically
 implemented to show that it can be viewed as a universal design pattern.
 Rather an attempt to show that for any client host system in which there
 is a an interaction between a host language, client language, and a remote
 structure — that a fully formed method of communicating between the two
 is presentable in this way.
\end_layout

\begin_layout Standard
Which can be viewed as the following implementations.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteView accessor object = do{
\end_layout

\begin_layout Plain Layout

	g <- constructor $ JavaScript $ pack $ accessor (var_text object)
\end_layout

\begin_layout Plain Layout

	procedure $ var g
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteSet accessor new_item object = constructor $ JavaScript $ pack $
\end_layout

\begin_layout Plain Layout

		(accessor (var_text objectName)) ++ " = " ++ new_item
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteOver accessor my_function object = do{
\end_layout

\begin_layout Plain Layout

	item <- RemoteView accessor object
\end_layout

\begin_layout Plain Layout

	let new_item = show $ my_function item
\end_layout

\begin_layout Plain Layout

	RemoteSet accessor new_item object
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As a reminder, it is worth noting that due to the fact that we are dealing
 with a remote connection that the connection must be passed around — in
 addition to the structure one wants to manipulate, where inside the structure
 one wishes to lens to, and a value if using the Set function.
\end_layout

\begin_layout Standard
Now, one more important thing to note, is while in Haskell one normally
 is manipulating and creating new objects every time one runs a function
 or assign it to a value.
 When manipulating Javascript, one is never creating a new object on the
 other side.
 So, any code one would want to write with these methods on the Haskell-side,
 would need to keep in mind that one is never dealing with a fresh object.
 The connection will always make sure one is pointing to the one and only
 original Javascript object one is trying to manipulate.
\end_layout

\begin_layout Standard
A key distinction on the improvements is that this removes any sort of backend
 coding, where the user is directly manipulating the delicate remote monad
 commands.
 And instead has a predefined way of accessing, editing, and setting values
 with minimal contact to the ideas and command structure beneath.
 One gets an abstraction and type safety on every component of the command,
 and modularity that clearly expresses your intent to the reader of your
 code.
\end_layout

\begin_layout Standard
Examples:
\end_layout

\begin_layout Standard
With basic syntactical sugar, with 
\emph on
RemoteView
\emph default
 as
\emph on
 ^.

\emph default
 And composition of remote lens fields as 
\emph on
>>>
\emph default
 … one gets a clear expression that shows to anyone else on ones coding
 team what one was doing.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

f :: Double <- person ^.
 nest >>> nest2 >> extra2
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Continuing for the remote-object of person, one is accessing 2 layers into
 it’s fields to retrieve a double value from extra3.
\end_layout

\begin_layout Standard
The normal syntax for this would be represented as.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteView (extra3(nest2(nest))) person
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Which expands out to in the weeds as.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

g <- constructor $ JavaScript $ pack $ (extra3(nest2(nest))) (var_text person)
\end_layout

\begin_layout Plain Layout

procedure $ var g
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Which shows the virtualization of machinery from each layer to the next
 in this system, and that whilst the syntactical sugar for 
\emph on
RemoteSet
\emph default
 and 
\emph on
RemoteOver
\emph default
 has not been shown, these share the same levels of abstractions.
 For completeness, examples of their basic calling is provided now.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteSet (extra3(nest2(nest))) 
\begin_inset Quotes eld
\end_inset

4
\begin_inset Quotes erd
\end_inset

 person
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

RemoteOver (extra3(nest2(nest))) (
\backslash
 x -> (x + 1::Double)) person
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
FP Complete Lens Exercise Adapated To 
\emph on
RemoteMonad
\emph default
 And 
\emph on
Remote Lens.
\end_layout

\begin_layout Plain Layout
– For Code Words like RemoteView 
\backslash
texttt{blah} 
\end_layout

\begin_layout Plain Layout
– Not applying them both at the same time.
\end_layout

\begin_layout Plain Layout
– Talk about why these are congruent but not equal, in original math they
 are equal.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is a particularly complete example from the first exercise of Haskell
 lensing from FP Complete, that was subsequently adapted to 
\emph on
RemoteMonad
\emph default
 and 
\emph on
Remote Lens 
\emph default
so that it could be clearly illustrated in long form what some of the major
 similarities and differences might be between remote and local implementations.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

address objectName = objectName ++ ".address"
\end_layout

\begin_layout Plain Layout

street objectName = objectName ++ ".street"
\end_layout

\begin_layout Plain Layout

city objectName = objectName ++ ".city"
\end_layout

\begin_layout Plain Layout

name objectName = objectName ++ ".name"
\end_layout

\begin_layout Plain Layout

age objectName = objectName ++ ".age" 
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Some Details.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

wilshire :: String
\end_layout

\begin_layout Plain Layout

wilshire = "
\backslash
"Wilshire Blvd
\backslash
""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

aliceWilshire :: RemoteValue a -> RemoteMonad (RemoteValue a)
\end_layout

\begin_layout Plain Layout

aliceWilshire newperson = RemoteSet (address >>> street) wilshire newperson
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

getStreet :: RemoteValue a -> (RemoteMonad String)
\end_layout

\begin_layout Plain Layout

getStreet newperson = RemoteView (address >>> street) newperson
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

birthday :: RemoteValue Int -> RemoteMonad (RemoteValue Int)
\end_layout

\begin_layout Plain Layout

birthday newperson = RemoteOver age (
\backslash
 x -> (x + 1::Int)) newperson
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

getAge :: RemoteValue a -> (RemoteMonad Int)
\end_layout

\begin_layout Plain Layout

getAge newperson = RemoteView age newperson
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Some Details.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

exercise1 :: Engine -> IO ()
\end_layout

\begin_layout Plain Layout

exercise1 eng = do
\end_layout

\begin_layout Plain Layout

	send eng $ do
\end_layout

\begin_layout Plain Layout

		command $ call "console.log" [string "starting..."]
\end_layout

\begin_layout Plain Layout

		render $ "Exercise1"
\end_layout

\begin_layout Plain Layout

		newperson <- initializeObjectAbstraction2 "alice" alice
\end_layout

\begin_layout Plain Layout

		aliceWilshire newperson
\end_layout

\begin_layout Plain Layout

		mystreet_person <- getStreet newperson
\end_layout

\begin_layout Plain Layout

		birthday newperson
\end_layout

\begin_layout Plain Layout

		herNewAge <- getAge newperson
\end_layout

\begin_layout Plain Layout

		render $ "mystreet_person: " ++ mystreet_person
\end_layout

\begin_layout Plain Layout

		render $ "herNewAge: " ++ show herNewAge
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Some Details.
\end_layout

\end_body
\end_document
