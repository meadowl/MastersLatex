#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass kuthesis
\begin_preamble
%%\usepackage{latexsym}
\usepackage{graphicx}

%%\usepackage{psfig}
%%\usepackage{color}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{ragged2e}
\RaggedRight
%\setlength{\parindent}{1.5 em}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{example}{Verbatim}{fontsize=\small}
\newcommand{\ignore}[1]{}

\usepackage{pstricks}
\usepackage{pstricks-add}
\usepackage{epsfig}
\usepackage{pst-grad} % For gradients
\usepackage{pst-plot} % For axes
\usepackage[space]{grffile} % For spaces in paths
\usepackage{etoolbox} % For spaces in paths
\makeatletter % For spaces in paths
\patchcmd\Gread@eps{\@inputcheck#1 }{\@inputcheck"#1"\relax}{}{}
\makeatother
\usepackage{auto-pst-pdf}
\end_preamble
\use_default_options false
\master ../thesis-ku.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "Times New Roman"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=none,xleftmargin=2pt,stepnumber=1,numbers=left,numbersep=5pt,numberstyle={\ttfamily\tiny\color[gray]{0.3}},belowcaptionskip={\bigskipamount},captionpos=b,escapeinside={*'}{'*},language=Haskell,tabsize=2,emphstyle={\bf},commentstyle={\it},stringstyle={\mdseries\rmfamily},showspaces=false,keywordstyle={\bfseries\rmfamily},columns=flexible,basicstyle={\small\sffamily},showstringspaces=false,morecomment={[l]\%}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
The Haskell Lens
\end_layout

\begin_layout Standard
Lenses are a restudy of the old problem of bidirectional transformations
 (bx) that were historically solved using dictionary and record systems.
 It is still an active field on it's own, with much stronger abstractions
 constructed to hold onto many different sub-fields within computer science.
 Explicitly described, 
\emph on
bx
\emph default
 are a mechanism for maintaining the consistency of two (or more) related
 sources of information, 
\begin_inset CommandInset citation
LatexCommand citet
key "inproceedings"
literal "false"

\end_inset

.
 The nature of bidirectional transformations allows them to be applied to
 domain specific languages and the host language itself, as a means to translate
 between run-time values.
\end_layout

\begin_layout Standard
From the discovering of lenses in the 
\emph on
bx
\emph default
 programming community there has been in recent years a new passion for
 their joint implementation in a larger variety of scenarios then they were
 initially imagined for.
 The study has broadened to the attempt to abstract and simplify over many
 sorts of structures, including their individual parts.
 The attempt at generality provides for opportunities in anything that might
 be presentable as a meaningful 
\emph on
bx
\emph default
.
\end_layout

\begin_layout Standard
The structure is so general, polymorphic that we need to establish laws
 that form what lenses are, and what rules that they should follow.
 This is important since there are lenses that do not follow any strict
 rules and arbitrarily apply bidirectional transformations in ways that
 aren't consistent, which makes them not well-behaved.
 In fact, this manuscript will only deal with the idea of well-behaved lenses
 and their applications.
 These typical mathematical lens have rules that shall be obeyed between
 strictly two sources of information, if one is to call them well-behaved.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{gather}
Set\;obj\;(View\;obj)\;=\;id\label{eq:1}\\
View\;(Set\;obj\;item)\;=\;obj\label{eq:2}\\
Set(Set(obj\;item)\;item^{\prime}\;=\;Set(obj\;item^{\prime})\label{eq:3}
\end{gather}

\end_inset


\end_layout

\begin_layout Standard
Important note, most definitions have the direction of the lens operators
 established.
 i.e.
 where the Set or View will traverse along a given object to reach the designate
d destination.
 So the only arguments are the structure itself in 
\emph on
View
\emph default
, with just structure and item in 
\emph on
Set
\emph default
.
 The definitions implicate that the overall pattern-matching system, which
 is the individually implemented lens for each focus in a structure, has
 been embedded before the configuration of 
\emph on
Set
\emph default
 and 
\emph on
View
\emph default
, respectively, in its descriptive rules.
 In use the lens is an active and changing argument that the programmer
 sets when they are establishing where they'd like to mutate a structure.
 It is perfectly possible that the lens laws themselves are defined with
 that extra argument as shown below, which exposes some addition structure
 underneath that the more instantiated definitions previously provided obfuscate
d.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{gather}
Set\;acc\;obj\;(View\;acc\;obj)\;=\;id\label{eq:1-1}\\
View\;acc\;(Set\;acc\;obj\;item)\;=\;obj\label{eq:2-1}\\
Set((acc\;Set(acc\;obj\;item)\;item^{\prime}\;=\;Set((acc\;obj\;item^{\prime})\label{eq:3-1}
\end{gather}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
preview true
filename "r.tex"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Lens Diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Lens Prism"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is a basic idea of what a simplistic lens accomplishes in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Lens Prism"
plural "false"
caps "false"
noprefix "false"

\end_inset

, showing a means to pattern match internally and a navigation of that structure
 to the desired focus with the help of a lens.
 The diagram hints that it is possible to navigate into the focus, provided
 that the focus is a similarly formatted structure.
 This is true, if both the primary structure and all associated substructures
 have been made in a way that allows for pattern-matching, then pattern-matching
 over the entire structure is possible.
 The stacking of structures, creates a composability of the lenses so that
 it becomes possible to find a focus even if it is nested two or more structures
 deep.
 The embedding a lens friendly structure into a larger one and the resulting
 composition of lenses is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagram of Lens Composition"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
preview true
filename "LensDiagram.tex"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Diagram of Lens Composition
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagram of Lens Composition"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are some basic Haskell types as well as examples that show that the
 idea of lenses applies to many sorts of structures, including modifications
 or inspections of two-tuple structures as displayed in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Elementary-Haskell-Lens"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{minipage}[t]{0.5
\backslash
textwidth}%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm]
\end_layout

\begin_layout Plain Layout

view :: w -> p
\end_layout

\begin_layout Plain Layout

set :: w -> p -> w
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

view_a :: (a,b) -> a
\end_layout

\begin_layout Plain Layout

view_a (x,y) = x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

set_a :: (a,b) -> a -> (a,b)
\end_layout

\begin_layout Plain Layout

set_a (x,y) x' = (x',y)
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{minipage}
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand input
preview true
filename "LensGraph.tex"

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Elementary Haskell Lens
\begin_inset CommandInset label
LatexCommand label
name "fig:Elementary-Haskell-Lens"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In simple cases, the general idea of pattern matching to obtain results
 is explicit and summarized inside the code itself.
 However, Haskell's compiler allows for implicit pattern matching to take
 place as well.
 The implicit calls to focus on specific elements of the two-tuple is handled
 in this manner for all cases shown.
 This holds true for both 
\emph on
view_a
\emph default
 and 
\emph on
set_a
\emph default
, where the inspection of the two-tuple is enough to view or set the contents
 of the structures respectively.
\end_layout

\begin_layout Standard
To explain further, lenses have been so generalized and grown to such a
 wide sub-field of 
\emph on
bx
\emph default
, that is becomes cumbersome to handle explanations for all the work that
 has been done, 
\begin_inset CommandInset citation
LatexCommand citet
key "inproceedings"
literal "false"

\end_inset

.
 These and many more topics will be restricted to monomorphic occurrences
 instead, whilst the rest will fall outside the scope of this thesis.
\end_layout

\begin_layout Standard
Expanding on how a lens may be implemented in Haskell, an important example
 to consider is how building lenses and operating on a structure work.
 Not an implicit lens like in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Elementary-Haskell-Lens"
plural "false"
caps "false"
noprefix "false"

\end_inset

, but an explicit lens that allows access to a richer structure.
 One begins by initializing such a structure as follows below.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm]
\end_layout

\begin_layout Plain Layout

data MyStructure = MyStructure {
\end_layout

\begin_layout Plain Layout

    MyName :: String
\end_layout

\begin_layout Plain Layout

    , MyAge :: Int}
\end_layout

\begin_layout Plain Layout

    deriving (Show, Eq)
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The structure contains two important points of focus a String and an Int
 value, and one can make a lens with the ability to access either of the
 two elements.
 In similarity the two-tuple example, constructing an accessor to each element
 to view or set must be done individually.
 But in this case, there isn't a trick to get the Haskell compiler to do
 all the work, so a little bit of code is needed to break inside.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm]
\end_layout

\begin_layout Plain Layout

type MyLens s a = forall f.
 Functor f => (a -> f a) -> s -> f s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

item_name :: MyLens MyStructure String
\end_layout

\begin_layout Plain Layout

item_name some_function (MyStructure l r) = 
\end_layout

\begin_layout Plain Layout

			(
\backslash
l'->  MyStructure l' r) <$> (some_function l)
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
From this, there is a general structure that represents how a lens may be
 formed by the type abstraction of 
\emph on
MyLens
\emph default
.
 Specifically instantiated the expansion for
\emph on
 item_name
\emph default
 would appear something along the lines of 
\emph on
(String -> f String) -> MyStructure -> f MyStructure
\emph default
.
 Which allows a set or view implementation to provide some functor that
 renders the inspection or modification of the structure in compliance with
 the well-behaved features of lenses.
 Another way to see this, is that upon inspecting the instantiation of 
\emph on
item_name
\emph default
, it is possible to spot out the initial pattern matching of the structure.
 The leftmost argument having 
\emph on
some_function 
\emph default
applied to it, before being injected back into the structure.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm]
\end_layout

\begin_layout Plain Layout

set :: forall s a.
 MyLens s a -> (a -> s -> s) 
\end_layout

\begin_layout Plain Layout

view :: MyLens s a -> (s -> a)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

getPatronTitle :: MyStructure -> String
\end_layout

\begin_layout Plain Layout

getPatronTitle = view item_name
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setPatronTitle :: MyStructure -> String -> MyStructure 
\end_layout

\begin_layout Plain Layout

setPatronTitle = set item_name
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The specifics of how 
\emph on
set
\emph default
 and 
\emph on
view
\emph default
 are implementing their individual accesses to the structure aren't terribly
 important, they are only giving instantiation to the much more familiar
 usage and format of the well-behaved lens laws in Equations 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:3"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 This is made more clear in the PatronTitle functions and type definitions,
 where after applying the lens to the set or view, then only the classic
 arguments are needed, since the lens has already focused on a specific
 area of the structure.
\end_layout

\end_body
\end_document
