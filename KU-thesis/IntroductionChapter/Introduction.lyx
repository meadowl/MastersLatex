#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass kuthesis
\begin_preamble
%%\usepackage{latexsym}
\usepackage{graphicx}

%%\usepackage{psfig}
%%\usepackage{color}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{ragged2e}
\RaggedRight
%\setlength{\parindent}{1.5 em}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{example}{Verbatim}{fontsize=\small}
\newcommand{\ignore}[1]{}
\end_preamble
\use_default_options false
\master ../thesis-ku.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=none,xleftmargin=2pt,stepnumber=1,numbers=left,numbersep=5pt,numberstyle={\ttfamily\tiny\color[gray]{0.3}},belowcaptionskip={\bigskipamount},captionpos=b,escapeinside={*'}{'*},language=Haskell,tabsize=2,emphstyle={\bf},commentstyle={\it},stringstyle={\mdseries\rmfamily},showspaces=false,keywordstyle={\bfseries\rmfamily},columns=flexible,basicstyle={\small\sffamily},showstringspaces=false,morecomment={[l]\%}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
This story begins with looking for overall abstractions between remote object
 systems and being curious as to seeing if adding an ordered lens-like structure
 was possible between multiple systems.
 Even if the abstraction is nothing more than a wrapper or boilerplate for
 existing code, it sparked my curiosity if these remote systems could stimulate
 or in fact provide the simplicity of lenses to an end user.
 And that these abstractions were representable of total systems in existence,
 due to their popularity with classical lenses.
 As well as the fact that several online server applications attempt to
 bring this boilerplate into their own code with different levels of effectivene
ss across their own systems.
\end_layout

\begin_layout Standard
This led to some initial questions and concerns, mainly what a lens is,
 what a lens is in a programing language – specifically Haskell, and what
 are the existing standards for what constitutes the different categories
 of lenses that exist in the broad community.
\end_layout

\begin_layout Standard
Keep in mind that Lenses are about solving a bijective dictionary problem,
 as so far as to provide convenience to the end user.
 Most commonly in the functional community lenses are abstractions that
 are popular to provide an object-oriented accessor notation to an object’s
 elements.
 In the sense that the functions that wrap data into record structures are
 able to be acted on by functions that unwrap or rewrap data in a convenient
 way.
 There are extensional ideas that relate to this such as Traversable structures
 and those should be representable as well.
 But that is not the primary focus of this research, although in the case
 of Remote Monad, the Traversable is very much implementable abet with some
 extra efforts.
\end_layout

\begin_layout Standard
Lenses are in briefest summary a mathematical tool to manipulate dictionaries
 and nested dictionaries.
 They came as an expansion to the mostly solved bijective dictionary space
 and an attempt to further expand out the work with new levels of abstractions.
 Every lens has a set and a get function that it bundles together, and are
 molded after object-class accessors.
 And essentially accomplish the goal of retrieving or mutating values inside
 of those kinds of objects.
 As to what the community considers a well-behaved lens, this in itself
 can be varied and ends up becoming unclear based on who’s implementation
 and rationalization you read on.
 Much like much of computer science terms end up thrown around interchangeably,
 meanings are lost and altered for established words, and so therefore it
 becomes important to establish what each body of work considers to be a
 lens and a well-defined lens.
\end_layout

\begin_layout Standard
For starters what separates well-defined from not? A well-defined function
 follows what are generally expected rules and results that the average
 user might expect.
 And a function that is not well-defined will possibly posses unexpected
 behaviors that the user doesn’t intend to occur.
 A clever way to imagine this is to imagine the standards in place for the
 C++ compiler.
 There are well-defined and expected results if one were to define a simple
 addition function.
 However, there are no defined results as to what should happen if your
 main function does not have a return statement embedded at the end.
 So in this way a well-defined lens has some expected behaviors that will
 always hold true if it follows a communities prescribed expectations.
 But unfortunately, the manual itself is ill-defined based on the source
 that you prescribe, therefore it is important that in this body of work
 the manual for a well-defined lens is included.
 So that it becomes possible to judge in this body of work if the lens fits
 what we wished from its behaviors.
 And ultimately anything that isn’t defined should be disregarded in the
 same way that one might disregard the C++ compilers handling of no return
 statement in main.
 We are ultimately concerned with defined behaviors as they relate to defined
 expectations.
\end_layout

\end_body
\end_document
