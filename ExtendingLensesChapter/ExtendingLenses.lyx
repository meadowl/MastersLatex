#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass kuthesis
\begin_preamble
%%\usepackage{latexsym}
\usepackage{graphicx}

%%\usepackage{psfig}
%%\usepackage{color}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{ragged2e}
\RaggedRight
%\setlength{\parindent}{1.5 em}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{example}{Verbatim}{fontsize=\small}
\newcommand{\ignore}[1]{}

\usepackage{fvextra}
\usepackage{pstricks}
\usepackage{pstricks-add}
\usepackage{epsfig}
\usepackage{pst-grad} % For gradients
\usepackage{pst-plot} % For axes
\usepackage[space]{grffile} % For spaces in paths
\usepackage{etoolbox} % For spaces in paths
\makeatletter % For spaces in paths
\patchcmd\Gread@eps{\@inputcheck#1 }{\@inputcheck"#1"\relax}{}{}
\makeatother
\usepackage{auto-pst-pdf}

\usepackage{nccmath}
\usepackage{setspace}
\end_preamble
\use_default_options false
\master ../thesis-ku.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "Times New Roman"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=none,xleftmargin=2pt,stepnumber=1,numbers=left,numbersep=5pt,numberstyle={\ttfamily\tiny\color[gray]{0.3}},belowcaptionskip={\bigskipamount},captionpos=b,escapeinside={*'}{'*},language=Haskell,tabsize=2,emphstyle={\bf},commentstyle={\it},stringstyle={\mdseries\rmfamily},showspaces=false,keywordstyle={\bfseries\rmfamily},columns=flexible,basicstyle={\small\sffamily},showstringspaces=false,morecomment={[l]\%}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Extending Lenses
\end_layout

\begin_layout Standard
As described, the two primary components of lenses are the 
\emph on
Set
\emph default
 and 
\emph on
View 
\emph default
functions
\emph on
 
\emph default
which produce as a result of applying them both at the same time a command
 referenced as 
\emph on
Over
\emph default
.
 When one applies
\emph on
 View 
\emph default
to the structure in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Expanded-Lens"
plural "false"
caps "false"
noprefix "false"

\end_inset

, an element of that structure is retrieved.
 We may then modify that retrieved element with some function before applying
 
\emph on
Set
\emph default
 to that very same structure.
 This results in a new structure which accomplishes the same as having applied
 
\emph on
Over
\emph default
 from the very beginning.
\end_layout

\begin_layout Standard
The application of 
\emph on
View
\emph default
 and 
\emph on
Set
\emph default
 in this sequence is equivalent to 
\emph on
Over
\emph default
.
 For the a command sequence to be equal to 
\emph on
Over
\emph default
, it must directly perform a given function onto the focus whilst in in
 the same singular injective process.
 This process of modeling the 
\emph on
Over
\emph default
 function can be best described as the following composition, 
\begin_inset Formula $Set\Big(obj,\:\,F\big(View(obj)\big)\Big)\:\,\models\:\,Over(obj,\:\,F)$
\end_inset

.
 For all valid objects, applying the desired function to the viewed object
 and then setting that modified object is equivalent to overing the object
 with that same function.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centerline{ 
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand input
preview true
filename "ExpandedLensDiagram.tex"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

 }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Expanded Lens
\begin_inset CommandInset label
LatexCommand label
name "fig:Expanded-Lens"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There exist many degrees of abstracting over elementary lenses like those
 provided in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Elementary-Haskell-Lens"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The documentation is not focused on the fuller expanses of the system of
 abstractions for lensing mechanisms inside of mathematics and programming,
 but instead finds relevance in the most simple formation of lenses which
 is now provided.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

data BasicLens a b = BasicLens {
\end_layout

\begin_layout Plain Layout

    viewer :: (a,b) -> a
\end_layout

\begin_layout Plain Layout

    , setter :: (a,b) -> a -> (a,b)}
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

This shows the capacity to build the lens datatype from a structure that
 contains the view and set explicitly for a given focus.
 Additionally, the ability to retrieve both the viewer and the setter as
 independent but composable functions is maintained.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

applyview ::  BasicLens a b -> (a, b) -> a
\end_layout

\begin_layout Plain Layout

applyview (BasicLens viewer setter) s = viewer s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

applyset ::  BasicLens a b -> (a,b) -> a -> (a,b)
\end_layout

\begin_layout Plain Layout

applyset (BasicLens viewer setter) s = setter s
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

As shown above, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{applyview}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{applyset}
\end_layout

\end_inset

 both use pattern matching to expose the internals of the elementary Haskell
 lens.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

a_Lens :: BasicLens a b a_Lens = BasicLens {
\end_layout

\begin_layout Plain Layout

    viewer = view_a
\end_layout

\begin_layout Plain Layout

    , setter = set_a}
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

The initialized version of this simplistic lens structure, preforms it's
 role for the 
\emph on
Set
\emph default
 and 
\emph on
View
\emph default
 defined in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Elementary-Haskell-Lens"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
This leads to the assertion that although defined in heavy detail and with
 great investment in the proofing of algebraic geometry, category theory,
 and homotopy type theory — the hard coded versions of lenses do not need
 to subject themselves to these abstractions.
 In fact, the levels of proofing and rigor abstract away what lenses can
 be defined to do, such as when shoving a lens into a monadic container.
 Which is why only the well-behaved lens laws in Equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2"
plural "false"
caps "false"
noprefix "false"

\end_inset

), are considered for the details of the manuscripts later chapters.
 If one has a curiosity if the pseudo-implementations of lenses discussed
 may be represented as standard lenses, then the continued reading is deeply
 recommended.
\end_layout

\end_body
\end_document
