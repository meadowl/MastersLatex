#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass kuthesis
\begin_preamble
%%\usepackage{latexsym}
\usepackage{graphicx}

%%\usepackage{psfig}
%%\usepackage{color}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{ragged2e}
\RaggedRight
%\setlength{\parindent}{1.5 em}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{example}{Verbatim}{fontsize=\small}
\newcommand{\ignore}[1]{}

\usepackage{fvextra}
\usepackage{pstricks}
\usepackage{pstricks-add}
\usepackage{epsfig}
\usepackage{pst-grad} % For gradients
\usepackage{pst-plot} % For axes
\usepackage[space]{grffile} % For spaces in paths
\usepackage{etoolbox} % For spaces in paths
\makeatletter % For spaces in paths
\patchcmd\Gread@eps{\@inputcheck#1 }{\@inputcheck"#1"\relax}{}{}
\makeatother
\usepackage{auto-pst-pdf}

\usepackage{nccmath}
\usepackage{setspace}
\end_preamble
\use_default_options false
\master ../thesis-ku.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "Times New Roman"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=none,xleftmargin=2pt,stepnumber=1,numbers=left,numbersep=5pt,numberstyle={\ttfamily\tiny\color[gray]{0.3}},belowcaptionskip={\bigskipamount},captionpos=b,escapeinside={*'}{'*},language=Haskell,tabsize=2,emphstyle={\bf},commentstyle={\it},stringstyle={\mdseries\rmfamily},showspaces=false,keywordstyle={\bfseries\rmfamily},columns=flexible,basicstyle={\small\sffamily},showstringspaces=false,morecomment={[l]\%}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Conclusion
\end_layout

\begin_layout Standard
We have examined Lenses in multiple ways from the elementary mathematical
 definition to the Haskell representation.
 Extending this concept to Remote Procedure Calls was established both in
 theory and in implementation with respect to the Remote Monad, cumulative
 with the Remote Lens DSL in a novel contribution.
 The method of design remained focused on bringing some of the functional
 niceties from the host language of Haskell to the client language of Javascript
, giving a successful means to lens into Remote Objects.
 While the Remote Lens was implemented without issue as a DSL, we saw from
 Chapter 5 that it was not formally a lens.
 This DSL is quite a convenient construction but it is not a implementation
 of a generically formed Lens as was initially hoped.
\end_layout

\begin_layout Standard
In future work, exploration of the difference between Remote Procedure Calls
 and database systems such as MySQL will be explored, unpublished work done
 by the author extending the Remote Lens DSL to MySQL was ultimately a far
 worse implementation of the pre-existing work in the field.
 Similarly, extending RPCs and the Remote Lenses in a simpler bridge environment
 with Python was also not a strong case for the guarantees of this Remote
 Lens interface.
 
\end_layout

\begin_layout Standard
There is the potential for more hopeful work, given the ability to implement
 a generalization of lenses called 
\emph on
Traversals
\emph default
 with the Remote Monad for the Remote Lens DSL, as shown below.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

trav_view :: (FromJSON b) => [(String -> String)] -> RemoteValue a -> RemoteMona
d [RemoteMonad b]
\end_layout

\begin_layout Plain Layout

trav_view list obj = case list of
\end_layout

\begin_layout Plain Layout

    x:[] -> do
\end_layout

\begin_layout Plain Layout

        pure [view2 x obj]
\end_layout

\begin_layout Plain Layout

    x:xs -> do
\end_layout

\begin_layout Plain Layout

        y <- trav_view xs obj
\end_layout

\begin_layout Plain Layout

        pure $ [view2 x obj] ++ y
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

trav_set :: [(String -> String)] -> String -> (RemoteValue a) -> RemoteMonad
 (RemoteValue a)
\end_layout

\begin_layout Plain Layout

trav_set list item obj = case list of
\end_layout

\begin_layout Plain Layout

    x:[] -> do
\end_layout

\begin_layout Plain Layout

        set2 x item obj
\end_layout

\begin_layout Plain Layout

    x:xs -> do
\end_layout

\begin_layout Plain Layout

        trav_set xs item obj
\end_layout

\begin_layout Plain Layout

        set2 x item obj
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

trav_over:: (FromJSON t, Show a) =>
\end_layout

\begin_layout Plain Layout

    [(String -> String)] -> (t -> a) -> (RemoteValue a) -> RemoteMonad (RemoteVa
lue a)
\end_layout

\begin_layout Plain Layout

trav_over list my_function obj = case list of
\end_layout

\begin_layout Plain Layout

    x:[] -> do
\end_layout

\begin_layout Plain Layout

        item <- view2 x obj
\end_layout

\begin_layout Plain Layout

        let new_item = show $ my_function item
\end_layout

\begin_layout Plain Layout

        set2 x new_item obj
\end_layout

\begin_layout Plain Layout

    x:xs -> do
\end_layout

\begin_layout Plain Layout

        trav_over xs my_function obj
\end_layout

\begin_layout Plain Layout

        item <- view2 x obj
\end_layout

\begin_layout Plain Layout

        let new_item = show $ my_function item
\end_layout

\begin_layout Plain Layout

        set2 x new_item obj
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

 As the Remote Monad demonstrates, there is potential it and for similarly
 structured APIs to allow for implementing richer Remote Lenses.
 The existence of a popular command in the 
\begin_inset listings
lstparams "basicstyle={\ttfamily},showstringspaces=false"
inline true
status open

\begin_layout Plain Layout

Control.Lens
\end_layout

\end_inset

 API called 
\begin_inset listings
lstparams "basicstyle={\ttfamily},showstringspaces=false"
inline true
status open

\begin_layout Plain Layout

makeLenses
\end_layout

\end_inset

 has also been explored for convenience of abstracting over Remote Object
 automatically, and there is little doubt that on a per Remote Lens implementati
ons, that the ability to 
\begin_inset listings
lstparams "basicstyle={\ttfamily},showstringspaces=false"
inline true
status open

\begin_layout Plain Layout

makeRemoteLenses
\end_layout

\end_inset

 would be constructible within Haskell's 
\begin_inset listings
lstparams "basicstyle={\ttfamily},showstringspaces=false"
inline true
status open

\begin_layout Plain Layout

TemplateHaskell
\end_layout

\end_inset

 library.
\end_layout

\begin_layout Standard
However, the Remote Lens Identities, Equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:3"
plural "false"
caps "false"
noprefix "false"

\end_inset

), are only Observably Equivalent and are heavily dependent on trusting
 the programmer of the DSL to ensure proper results.
 Future work in proving Behavioral Equivalence from the verification of
 the suspicion that a properly defined RemoteView and RemoteSet can model
 View and Set.
 
\end_layout

\begin_layout Standard
There are many paths to be taken forward, that will hopefully be explored
 to enrich the literature on this newly defined topic of Remote Lenses.
\end_layout

\end_body
\end_document
