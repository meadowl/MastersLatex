#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass kuthesis
\begin_preamble
%%\usepackage{latexsym}
\usepackage{graphicx}

%%\usepackage{psfig}
%%\usepackage{color}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{ragged2e}
\RaggedRight
%\setlength{\parindent}{1.5 em}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{example}{Verbatim}{fontsize=\small}
\newcommand{\ignore}[1]{}

\usepackage{fvextra}
\usepackage{pstricks}
\usepackage{pstricks-add}
\usepackage{epsfig}
\usepackage{pst-grad} % For gradients
\usepackage{pst-plot} % For axes
\usepackage[space]{grffile} % For spaces in paths
\usepackage{etoolbox} % For spaces in paths
\makeatletter % For spaces in paths
\patchcmd\Gread@eps{\@inputcheck#1 }{\@inputcheck"#1"\relax}{}{}
\makeatother
\usepackage{auto-pst-pdf}

\usepackage{nccmath}
\usepackage{setspace}
\end_preamble
\use_default_options false
\master ../thesis-ku.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "Times New Roman"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=none,xleftmargin=2pt,stepnumber=1,numbers=left,numbersep=5pt,numberstyle={\ttfamily\tiny\color[gray]{0.3}},belowcaptionskip={\bigskipamount},captionpos=b,escapeinside={*'}{'*},language=Haskell,tabsize=2,emphstyle={\bf},commentstyle={\it},stringstyle={\mdseries\rmfamily},showspaces=false,keywordstyle={\bfseries\rmfamily},columns=flexible,basicstyle={\small\sffamily},showstringspaces=false,morecomment={[l]\%}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Extending Remote Lenses
\end_layout

\begin_layout Standard
This chapter explicitly will deal with a compare and contrast to the Extended
 Lenses chapter, along with any additional information that was out of place
 in the Remote Monad Chapter.
 The end goal is a reasonable intuition if 
\emph on
Remote Lenses
\emph default
 are indeed 
\emph on
Lenses
\emph default
.
 One having paid careful mind in the detailing of implementation and theory
 discussed about the 
\emph on
Remote Lenses
\emph default
, should have come to a question about the exact degree of resemblance that
 these structures have to their locally designed counterparts.
 In fact, keeping the methods of creating a total lens structure, a way
 to show the closeness between 
\emph on
Local Lenses
\emph default
 and 
\emph on
Remote Lenses
\emph default
 would be to attempt expressing their remote nature in the style of the
 local abstractions.
 Now we will start with attempting to shape the structure of
\emph on
 RemoteView 
\emph default
and 
\emph on
RemoteSet
\emph default
 into a data structure.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

data RemoteLens a b = RemoteLens {
\end_layout

\begin_layout Plain Layout

    remote_view ::  (FromJSON b) => (String -> String) -> (RemoteValue a)
 -> (RemoteMonad b)
\end_layout

\begin_layout Plain Layout

    , remote_set :: (String -> String) -> String -> (RemoteValue a) -> RemoteMon
ad (RemoteValue a)}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

applyview :: FromJSON b => RemoteLens2 a b -> (String -> String) -> RemoteValue
 a -> RemoteMonad b 
\end_layout

\begin_layout Plain Layout

applyview (RemoteLens2 remote_view remote_set) = remote_view
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

applyset :: RemoteLens2 a b -> (String -> String) -> String -> RemoteValue
 a -> RemoteMonad (RemoteValue a) 
\end_layout

\begin_layout Plain Layout

applyset (RemoteLens2 remote_view remote_set) = remote_set
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a_Lens :: RemoteLens a b
\end_layout

\begin_layout Plain Layout

a_Lens = RemoteLens {
\end_layout

\begin_layout Plain Layout

    remote_view = RemoteView
\end_layout

\begin_layout Plain Layout

    , remote_set = RemoteSet}
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Whilst the nature of being able to neatly wrap the generalized 
\emph on
Remote Lens
\emph default
 commands together is easily implemented, this immediately approach doesn't
 come close to the meaning held in the local variation in Chapter 3.
 The meaning of wrapping the 
\emph on
View
\emph default
 and 
\emph on
Set
\emph default
 together in a
\emph on
 Local Lens
\emph default
, is to wrap together the means of accessing a specific focus.
 In this case, we have wrapped together a general 
\emph on
RemoteView
\emph default
 and 
\emph on
RemoteSet
\emph default
, that can be specialized to access anywhere in the larger 
\emph on
Remote Structure
\emph default
.
 Essentially this form of abstraction only complicates the use of the original
 commands, while pointlessly obfuscating the underlying ease of use that
 the composability of the pseudo-accessor functions were supposed to provide.
\end_layout

\begin_layout Standard
Not to easily give up hope just yet that an equivalent method exists, the
 next significant attempt is to instantiate a far less general
\emph on
 Remote Lens
\emph default
 data type and the way to do this is to start talking about the primary
 example from Chapter 4.
 The abstraction will be directly over the accessor methods, much in the
 similar way that the abstractions are attempted on a per element basis
 in normal automatic generation of 
\emph on
Local Lens
\emph default
 constructions.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

data RL_ObjectA  = RL_ObjectA {
\end_layout

\begin_layout Plain Layout

    rl_address :: String -> String
\end_layout

\begin_layout Plain Layout

    , rl_street :: String -> String
\end_layout

\begin_layout Plain Layout

    , rl_city :: String -> String
\end_layout

\begin_layout Plain Layout

    , rl_name :: String -> String
\end_layout

\begin_layout Plain Layout

    , rl_age :: String -> String}
\end_layout

\begin_layout Plain Layout

    deriving (Show)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a_Object :: RL_ObjectA a_Object = RL_ObjectA {
\end_layout

\begin_layout Plain Layout

    rl_address = address
\end_layout

\begin_layout Plain Layout

    , rl_street = street
\end_layout

\begin_layout Plain Layout

    , rl_city = city
\end_layout

\begin_layout Plain Layout

    , rl_name = name
\end_layout

\begin_layout Plain Layout

    , rl_age = age}
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

This doesn't provide anything but a formalization of the ways that 
\emph on
Remote Lenses
\emph default
 were already being handled.
 Which surprisingly, only adds unnecessary bulk to the already clear methods
 of invoking the remote calls.
 The following code shows this specialization does maintain the ability
 to write generalized accessors, that would act on any
\emph on
 Remote Lens Object
\emph default
 that was properly instantiated.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

remote_view_name :: FromJSON b => RL_ObjectA -> RemoteValue a -> RemoteMonad
 b
\end_layout

\begin_layout Plain Layout

remote_view_name object newperson = RemoteView (rl_name object) newperson
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

remote_set_name :: RL_ObjectA -> String -> RemoteValue a -> RemoteMonad
 b
\end_layout

\begin_layout Plain Layout

remote_set_name object item newperson = RemoteView (rl_name object) item
 newperson
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If keeping this line of attempts to specialize, then another perspective
 would be to take the valid alternative construction approach from Chapter
 3 to it's full conclusion with this specific case in 
\emph on
Remote Lenses
\emph default
.
 Rather than one specializing the accessors, providing them bundled together
 just like 
\emph on
A-lens
\emph default
 will allow for a more safe and clear means of using these commands.
 In the provided implementation below, the first introduced method is now
 having it's 
\emph on
RemoteView
\emph default
 and 
\emph on
RemoteSet
\emph default
 instantiated with the focus of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{name}
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

data RemoteLens a b = RemoteLens {
\end_layout

\begin_layout Plain Layout

    remote_view :: FromJSON b => (RemoteValue a) -> (RemoteMonad b)
\end_layout

\begin_layout Plain Layout

    , remote_set :: String -> (RemoteValue a) -> RemoteMonad (RemoteValue
 a)}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

applyview :: FromJSON b => RemoteLens a b -> RemoteValue a -> RemoteMonad
 b
\end_layout

\begin_layout Plain Layout

applyview (RemoteLens2 remote_view remote_set) = remote_view
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

applyset :: RemoteLens a b -> String -> RemoteValue a -> RemoteMonad (RemoteValu
e a)
\end_layout

\begin_layout Plain Layout

applyset (RemoteLens2 remote_view remote_set) = remote_set
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a_Lens :: RemoteLens a b a_Lens = RemoteLens {
\end_layout

\begin_layout Plain Layout

    remote_view = RemoteView name
\end_layout

\begin_layout Plain Layout

    , remote_set = RemoteSet name}
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

The full exposure provided in this method resembles the closest to the nature
 of the two-tuple example provided in the previous chapters, but it lacks
 certain properties that one would define in a classically constructed lens.
\end_layout

\begin_layout Standard
It is finally time to deal with the largest question posed in this manuscript,
 are 
\emph on
Remote Lenses
\emph default
 truly 
\emph on
Lenses
\emph default
? An assessment that will be argued over in multiple parts, starting with
 the meaning of the generalized lens type signature and its relationship
 to the 
\emph on
Remote
\emph default
 
\emph on
Lens
\emph default
 and ending with an exploration of the mechanical work being accomplished
 irregardless of the type signature.
\end_layout

\begin_layout Standard
Starting off with the first part, it is now time to look at broad difference
 between the type signature of anything that is remotely similar to a lens
 and the type signature of the 
\emph on
Remote
\emph default
 
\emph on
Lens
\emph default
 itself.
 Abstracting away the finer details, if this were to be valid code shown
 below, one might imagine the following generalizations.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

LocalLensView :: MyObject -> MyItem
\end_layout

\begin_layout Plain Layout

LocalLensSet :: MyItem -> MyObject -> MyObject
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

RemoteLensView :: PointertoObject -> ReturningData
\end_layout

\begin_layout Plain Layout

RemoteLensSet :: ValueToBeSent -> PointertoObject -> ReturningData
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

To a careful reader, there is a stern contrast that likely might have sat
 in the background of the mind for a long while: wondering what is so off
 about the usage of the syntactical sugar, despite how closely it appeared
 to mimic the familiar counterpart.
 That is, in a Local Lens the input object and the output object from the
 definition of 
\emph on
Set
\emph default
 is always the same.
 If given a two-tuple, then a two-tuple is what will be returned.
 Fundamentally what is a mechanical difference between Local Lenses and
 Remote Lenses, results from the fact that in Remote Lenses the returning
 information from a Set operation is simply an indication of a job done,
 not the pointer to the changed object.
 If one was inclined, asserting that they are not lenses would be a fair
 judgment on the nature of these two creatures.
 in fact, it wouldn't make sense, the abstraction to begin with is based
 on the capacity to abstract cleverly with a functor.
 Here we are dealing with a situation where it isn't abstractable in a sensible
 way to a functor.
\end_layout

\begin_layout Standard
The one thing left that might save this from being merely a design pattern,
 would be if on the client side an act of lensing was taking place to have
 it's result retrieved and decoded on the host side.
 This is in fact the case, as the accessing of the client's objects fields
 via point-styled references is a synonymous situation with using lens methodolo
gy.
 As one might remember, the major motivation for lenses is to provide an
 abstraction in the 
\emph on
bx
\emph default
 field.
 The oldest and least type safe method of handling this in the context of
 objects, is directly calling on their parameterized accessors.
 If the client and host are interacting in a method such as in the Remote
 Monad, then it is possible to make the Remote Lens use the Local Lens on
 the client's side.
\end_layout

\begin_layout Standard
Ultimately, while the Remote Lens does not type check as a Local Lens, the
 Remote Lens can promise to the user that it is acting as if it were a Local
 Lens.
 Which fits squarely in what a DSL provides, abstraction of commands for
 the sake of usability and convenience.
 But if forced to pick a binary choice, the Remote Lens is not a Lens —
 rather it is a means to an end of being able to use a Lens.
\end_layout

\end_body
\end_document
