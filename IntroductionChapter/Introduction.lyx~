#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass kuthesis
\begin_preamble
%%\usepackage{latexsym}
\usepackage{graphicx}

%%\usepackage{psfig}
%%\usepackage{color}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{ragged2e}
\RaggedRight
%\setlength{\parindent}{1.5 em}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{example}{Verbatim}{fontsize=\small}
\newcommand{\ignore}[1]{}

\usepackage{pstricks}
\usepackage{pstricks-add}
\usepackage{epsfig}
\usepackage{pst-grad} % For gradients
\usepackage{pst-plot} % For axes
\usepackage[space]{grffile} % For spaces in paths
\usepackage{etoolbox} % For spaces in paths
\makeatletter % For spaces in paths
\patchcmd\Gread@eps{\@inputcheck#1 }{\@inputcheck"#1"\relax}{}{}
\makeatother
\usepackage{auto-pst-pdf}
\end_preamble
\use_default_options false
\master ../thesis-ku.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "Times New Roman"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=none,xleftmargin=2pt,stepnumber=1,numbers=left,numbersep=5pt,numberstyle={\ttfamily\tiny\color[gray]{0.3}},belowcaptionskip={\bigskipamount},captionpos=b,escapeinside={*'}{'*},language=Haskell,tabsize=2,emphstyle={\bf},commentstyle={\it},stringstyle={\mdseries\rmfamily},showspaces=false,keywordstyle={\bfseries\rmfamily},columns=flexible,basicstyle={\small\sffamily},showstringspaces=false,morecomment={[l]\%}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
The origin of this work begins with looking for overall abstractions between
 remote object systems and investigating whether adding an ordered lens-like
 structure was possible between multiple systems.
 These remote systems could stimulate or in fact provide the simplicity
 of lenses to an end user, such that these abstractions were representative
 of systems already in existence.
 Due to the popularity of classical lenses, it was discovered that online
 applications attempt to bring this boilerplate into their own code with
 different levels of effectiveness across their own systems.
\end_layout

\begin_layout Standard
To begin with, 
\begin_inset CommandInset citation
LatexCommand citet
key "Foster2007"
literal "false"

\end_inset

, this field has been strictly derived from the premise of database systems,
 with even this primary source having constrained itself to a strict representat
ion in the fundamentals.
 The fact of this is not a surprise when considering that the original well-beha
ved lens laws were first formulated by Benjamin C.
 Pierce in the context of database manipulation, 
\begin_inset CommandInset citation
LatexCommand citet
key "Pierce2003,Greenwald2003"
literal "false"

\end_inset

.
 From this series of work, Lenses originated from studying bidirectional
 transformations, as providing convenience to the end user as well as layers
 of type safety.
 Most commonly in the functional programming community lenses are popular
 abstractions to provide an object-oriented accessor notation to an object’s
 elements: the functions that wrap data into structures are able to be acted
 on by functions that unwrap or re-wrap data in a convenient way.
 There are extensional ideas that relate to this such as Traversable Structures,
 but that is not the primary focus of this research, although in the case
 of Remote Monad, the Traversable is very much implementable — albeit with
 some extra efforts.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
filename "OpticsHierarchy.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Optics Hierarchy
\begin_inset CommandInset label
LatexCommand label
name "fig:Optics-Hierarchy"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are several types of lenses that bridge the gap between remote and
 local interactions already in existence, with varying degrees of depth
 of implementation.
 From the broad categories of c-lenses to the category of d-lenses, 
\begin_inset CommandInset citation
LatexCommand citet
key "Johnson2013"
literal "false"

\end_inset

 use the concepts of opfibrations to encapsulate the nature of transition
 information between a system and a database.
 The previous work derives its motivation from database systems such as
 SQL and the manipulation of table or record information, i.e.
 the original derivation of the c-lens from the categorical notion of Grothendie
ck opfibration, 
\begin_inset CommandInset citation
LatexCommand citet
key "Grothendieck1971"
literal "false"

\end_inset

, for a solution to the view update problem for functorial update processes,
 
\begin_inset CommandInset citation
LatexCommand citet
key "Johnson2011"
literal "false"

\end_inset

.
 From the idea that a host can only see a certain amount of information
 from the client side's database system, but both must maintain a consistently
 updated view parameter, 
\begin_inset CommandInset citation
LatexCommand citet
key "Ahman2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
filename "LensFields.tex"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Variety of Lenses
\begin_inset CommandInset label
LatexCommand label
name "fig:Variety-of-Lenses"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
indent 
\end_layout

\end_inset

In fact, the advancements in category theory are heavily rooted in earlier
 works that bridged the gaps between algebraic topology and algebraic geometry,
 
\begin_inset CommandInset citation
LatexCommand citet
key "Grothendieck1958-1960"
literal "false"

\end_inset

.
 Which nearly paralleled the formalization of Beck's work in the formalization
 of the monadicity theorem which established when a functor is monadic,
 
\begin_inset CommandInset citation
LatexCommand citet
key "Beck1967"
literal "false"

\end_inset

.
 These and multiple many discoveries gave rise to the derivation of several
 important concepts, including bifibrations and the monad itself, the details
 of which are not in the scope of this manuscript.
 Which gives rise to the formality of lenses despite their very humble beginning
s, 
\begin_inset CommandInset citation
LatexCommand citet
key "Greenwald2003"
literal "false"

\end_inset

.
 The notions of what can be considered entirely a lens or a portion of the
 children a lens structure, is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Variety-of-Lenses"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
indent 
\end_layout

\end_inset

Much of the general theory has assumed a typical database relationship such
 as SQL or other table based services, this is based from the hard coded
 implementations that preceded these constructed ideas, which are hand tailored
 in works such as 
\begin_inset CommandInset citation
LatexCommand citet
key "Bohannon2006"
literal "false"

\end_inset

.
 Several of these works are representative of these direct methods and their
 specific heritage in database problems which would be too numerous to cite
 here, but an impactful reference on source-to-target and target-to-source
 transformations is 
\begin_inset CommandInset citation
LatexCommand citet
key "Fuxman2006"
literal "false"

\end_inset

.
 Including a wide range of work finding uses for lenses outside of their
 typical domain, most notably Boomerang a bidirectional programming language
 for textual strings, 
\begin_inset CommandInset citation
LatexCommand citet
key "Barbosa2010"
literal "false"

\end_inset

, with further development in Optician, 
\begin_inset CommandInset citation
LatexCommand citet
key "Miltner2017"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Which is why there is still open space for pseudo-implementations of lenses
 that haven't received much coverage if any in literature, perhaps because
 they break from all of the much higher level concepts and exert effort
 in the more rudimentary space of custom constructed Domain Specific Languages
 (DSLs).
 A DSL that is built over existing systems, not from the ground up with
 an intention of being able to represent much deeper concepts.
 It is a focus on practical designing patterns that are concerned with construct
ion in the execution space.
 Since one doesn't need more than an understanding of the well-behaved lens
 laws to be able to put them into application for remote and local systems.
 
\end_layout

\begin_layout Standard
Additionally, DSLs already have their own unique sub-field in the lensing
 community with respect to the bidirectional transformation problem 
\begin_inset CommandInset citation
LatexCommand citet
key "Czarnecki2009"
literal "false"

\end_inset

.
 This topic focuses on the API advancements provided by the Remote Monad
 design pattern for remote calls to external systems for the purposes of
 Remote Procedure Calls that have their commands executed remotely before
 returned locally, 
\begin_inset CommandInset citation
LatexCommand citet
key "Gill2015"
literal "false"

\end_inset

.
 The Remote Lensing is in the same vein as database lensing, but it distinguishe
s itself by being primarily focused on Remote Procedure Calls rather than
 the typical database view update problem — of the latter this is not an
 attempt to expand on.
 This manuscript is focused on bringing in the concepts of Remote Lenses
 which are neglected in documented literature, to an explicit focus on their
 usability and ease of implementation from the fundamental well-behaved
 rules, and the capacity to scaffold them onto existing API.
\end_layout

\end_body
\end_document
