#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass kuthesis
\begin_preamble
%%\usepackage{latexsym}
\usepackage{graphicx}

%%\usepackage{psfig}
%%\usepackage{color}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{ragged2e}
\RaggedRight
%\setlength{\parindent}{1.5 em}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{example}{Verbatim}{fontsize=\small}
\newcommand{\ignore}[1]{}

\usepackage{fvextra}
\usepackage{pstricks}
\usepackage{pstricks-add}
\usepackage{epsfig}
\usepackage{pst-grad} % For gradients
\usepackage{pst-plot} % For axes
\usepackage[space]{grffile} % For spaces in paths
\usepackage{etoolbox} % For spaces in paths
\makeatletter % For spaces in paths
\patchcmd\Gread@eps{\@inputcheck#1 }{\@inputcheck"#1"\relax}{}{}
\makeatother
\usepackage{auto-pst-pdf}

\usepackage{nccmath}
\usepackage{setspace}
\end_preamble
\use_default_options false
\master ../thesis-ku.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "times" "Times New Roman"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=none,xleftmargin=2pt,stepnumber=1,numbers=left,numbersep=5pt,numberstyle={\ttfamily\tiny\color[gray]{0.3}},belowcaptionskip={\bigskipamount},captionpos=b,escapeinside={*'}{'*},language=Haskell,tabsize=2,emphstyle={\bf},commentstyle={\it},stringstyle={\mdseries\rmfamily},showspaces=false,keywordstyle={\bfseries\rmfamily},columns=flexible,basicstyle={\small\sffamily},showstringspaces=false,morecomment={[l]\%}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Remote Lenses and The Remote Monad
\end_layout

\begin_layout Standard
In this chapter, we detail a novel extension of lenses to remote structures
 making use of the Remote Monad.
 The definitions provided in the previous chapters allow for one to describe
 a variation of lenses that copies the syntactical sugar and programmatic
 intent of these operators over a remote connection between a client and
 a host device, the host running Haskell and the client running some other
 language.
 We refer to this variation from standard local lenses and other classical
 variants as the 
\emph on
Remote Lens
\emph default
.
\end_layout

\begin_layout Standard
We now extend the abstract identities in Equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to the Remote Lens setting, obtaining the 
\emph on
Remote Lens Identities
\emph default
,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{spacing}{1} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{flalign}
RemoteSet\big(acc,\:\,RemoteView(acc,\,\:obj),\:\,obj\big)\,\: & \equiv\:\,obj\:\,,\nonumber \\
RemoteView\big(acc,\,\:RemoteSet(acc,\,\,item,\:\,obj)\big)\,\: & \equiv\:\,item\:\,,\label{eq:3}\\
RemoteSet(acc,\,\:item,\,\:obj)\,\:;\,\:RemoteSet(acc,\:\,item2,\,\:obj)\:\, & \equiv\,\:RemoteSet(acc,\,\:item2,\,\:obj)\:\,.\nonumber 
\end{flalign}

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{spacing} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

Where as a lens interacts with a structure, a Remote Lens interacts with
 a Remote Structure.
 The 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $;$
\end_inset


\begin_inset Quotes erd
\end_inset

 in the equations above denotes the sequence of operation and 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\equiv$
\end_inset


\begin_inset Quotes erd
\end_inset

 denotes congruence but not equality.
 The fundamental distinction for why classical equality is not used, is
 that these operations are not the same in all respects and therefore cannot
 be defined as such.
 Rather equivalence is narrowly interpreted to abstract away the individual
 operations that take place between the host and client when executing remote
 commands.
 The process of wrapping and sending commands, then receiving and unpacking
 them is equivalent to the process being carried out by the remote system
 without interaction from the local system.
 A correct analogy would be taking the maintained connection to be a pointer,
 and after dereferencing the pointer and preforming some operation to it
 that results in no change to the object, it is the same as having never
 started to dereference in the first place.
 In summation, these equations are 
\emph on
Observably Equivalent
\emph default
, so they do not produce a different result from one another given the same
 input.
\end_layout

\begin_layout Standard
The essentials of what is required to construct the Remote Lens Identities
 inside of Haskell is similar to the construction of definitions seen in
 the elementary Prelude constructions of Haskell lenses.
 The first argument typically taken by any lens operator, 
\emph on
acc
\emph default
 as shown above,is a function that will access a deep-rooted parameter inside
 of a structure.
 In the same vein, the
\emph on
 
\emph default
Remote Lens accomplishes this with an abstraction of the Remote Structure's
 nested fields that are to be queried once the command is sent from host
 to client.
 The primary difference is in how this is handled by Haskell.
 Rather than simply pattern matching into the already existing structure,
 a completely different approach is needed instead due to to the structure
 being remote.
 To define the individual components of Remote Lenses for an arbitrary type
 system we begin by providing the relevant abstract type definitions below.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=false,breakafter={>}]
\end_layout

\begin_layout Plain Layout

RemoteView :: (String -> String) -> (Wrapped a) -> (ReturnType b)
\end_layout

\begin_layout Plain Layout

RemoteSet :: (String -> String) -> String -> (Wrapped a) ->            
    ReturnType (Wrapped a)
\end_layout

\begin_layout Plain Layout

RemoteOver :: (String -> String) -> (t -> a) -> (Wrapped a) ->         
       ReturnType (Wrapped a)
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This approach is best summarized as a melding between the fundamental methods
 used in typical lens methods that rely strongly on internal pattern matching
 for the composability of lens, and the existence of a remote connection
 that prevents that internal pattern matching to take place.
 This is relevant to any scenario where accessing a structure isn't possible
 inside of the host system, and it is necessary to query a client system.
 This is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Remote-Diagrams"
plural "false"
caps "false"
noprefix "false"

\end_inset

, which should be distinguished and contrasted with the much similar local
 implementation in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagram of Lens Composition"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "49col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
preview true
filename "LensingRemotely_Redo.tex"

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "49col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand input
preview true
filename "LensingRemotely_Redo2.tex"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Remote Diagrams.
\begin_inset CommandInset label
LatexCommand label
name "fig:Remote-Diagrams"

\end_inset

 The left diagram illustrates Remote View, while the right illustrates the
 Remote Set.
 Solid lines are local executions, dashed lines are remote transactions,
 dotted lines are the continuing connection.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Remote Lenses will involve internally forming a conjointment of the parameters
 such that each of the parameters that normally would be accessed with a
 composition of pattern matching functions, must instead be accessed with
 a composition of the Remote Object's internal parameters.
 This is equivalent to representing the target object as a remote record
 with the means to access the contents completely dependent on how that
 record is implemented inside of the client's language.
\end_layout

\begin_layout Standard
The
\emph on
 obj
\emph default
 argument in Equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:3"
plural "false"
caps "false"
noprefix "false"

\end_inset

) represents a reference to the location of what is to be accessed upon
 sending the constructed command.
 Since one is manipulating only a reference to the actual object on the
 client's side, this implies that directly accessing the information is
 not possible.
 That is, the conjointment method described in the former paragraph is needed
 to focus in on the remote structure.
 Bundling the reference to the Remote Object along with the preformed command
 to operate on the Remote Object is necessary, otherwise none of the methods
 to view or alter the contents of that structure can be accomplished.
 As anytime that one wishes to operate on a Remote Object, the host side
 needs to know where in the client side it is accessing and what it is going
 to do once it arrives there.
\end_layout

\begin_layout Standard
The final common parameter of Equations (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:3"
plural "false"
caps "false"
noprefix "false"

\end_inset

) is the returned item from the result of applying a lens operator to the
 structure that is being inspected.
 Where 
\emph on
RemoteView
\emph default
 returns the queried item wrapped in the remote operator that allowed for
 the operation to take place and for
\emph on
 RemoteSet/RemoteOver
\emph default
 the returned item will be the reference to the altered structure wrapped
 up in the same remote operator.
 The only major consideration when manipulating the returned structure,
 is that one must assign the type of the expected viewed parameter or trust
 that there is sufficient information that Haskell can self-interpret the
 type for itself.
\end_layout

\begin_layout Standard
Now it is possible to introduce the primary example that this manuscript
 will cover, specifically the 
\emph on
Remote Lens
\emph default
 as it relates to the 
\emph on
Remote Monad.

\emph default
 This has been selected because the Javascript 
\emph on
RPCs
\emph default
 are representative of a weakly typed client language and Haskell is able
 to represent a strongly typed host language, 
\begin_inset CommandInset citation
LatexCommand citet
key "Gill2015"
literal "false"

\end_inset

.
 Additionally, the Remote Monad provides all of the functionality necessary
 to implement the desired lens functions.
 Now given below is the construction of the Remote Lens' key functions.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteView :: (FromJSON b) => (String -> String) -> (RemoteValue a) -> (RemoteMo
nad b)
\end_layout

\begin_layout Plain Layout

RemoteSet :: (String -> String) -> String -> (RemoteValue a) ->        
         RemoteMonad (RemoteValue a)
\end_layout

\begin_layout Plain Layout

RemoteOver :: (FromJSON t, Show a) => (String -> String) -> (t -> a) ->
 (RemoteValue a) -> RemoteMonad (RemoteValue a)
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These are the types for the set of functions that seek to emulate the methods
 of 
\emph on
View
\emph default
, 
\emph on
Set
\emph default
, and 
\emph on
Over
\emph default
 that have been defined specifically for a
\emph on
 
\emph default
Remote Lens based on using the Remote Monad.
 Though they emulate 
\emph on
View
\emph default
, 
\emph on
Set
\emph default
, and 
\emph on
Over —
\emph default
 they do not share the same internal structure.
 These definitions are specific to the Remote Monad but they demonstrate
 a universal design pattern.
 This example shows that for any client-host system in which there is a
 an interaction between a host language, a client language, and a remote
 structure, that a fully formed method of communicating between the two
 is presentable as a Remote Lens in this way, implemented in Haskell below.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteView accessor object = do{
\end_layout

\begin_layout Plain Layout

	g <- constructor $ JavaScript $ pack $ accessor (var_text object)
\end_layout

\begin_layout Plain Layout

	procedure $ var g
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteSet accessor new_item object = constructor $ JavaScript $ pack $ 
                (accessor (var_text objectName)) ++ " = " ++ new_item
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteOver accessor my_function object = do{
\end_layout

\begin_layout Plain Layout

	item <- RemoteView accessor object
\end_layout

\begin_layout Plain Layout

	let new_item = show $ my_function item
\end_layout

\begin_layout Plain Layout

	RemoteSet accessor new_item object
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is worth noting that due to the fact that we are dealing with a remote
 connection, the connection must be passed as a parameter in addition to
 the structure that one wants to manipulate, the accessor to the individual
 segment of the structure, and a value if using the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{RemoteSet}
\end_layout

\end_inset

 function.
 While in Haskell one normally manipulates and creates new objects every
 time one runs a function or assigns a value, in Javascript new objects
 are never created within the Remote Monad implementation.
 Thus, any code one would want to write with these methods on the Haskell
 side would need to keep in mind that one is never dealing with a fresh
 object.
 The connection will always make sure one is pointing to the one and only
 original Javascript object one is trying to manipulate.
\end_layout

\begin_layout Standard
(Left Off Here Last Time)A key distinction on the improvements is that this
 removes any sort of backend coding, where the user is directly manipulating
 the delicate remote monad commands.
 And instead has a predefined way of accessing, editing, and setting values
 with minimal contact to the ideas and command structure beneath.
 One gets an abstraction and type safety on every component of the command,
 and modularity that clearly expresses your intent to the reader of your
 code.
 In the following examples, similarities and contrasts between Remote Lenses
 and Local Lenses will be made clear to the reader.
\end_layout

\begin_layout Standard
With basic syntactical sugar, with 
\emph on
RemoteView
\emph default
 as ^.
 and composition of remote lens fields as >>> one gets a clear expression
 that shows to anyone else on ones coding team what one was doing.
 The traditional point-style notations is mostly maintained along with a
 slight alteration to the composability of 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

 to the 
\begin_inset Quotes eld
\end_inset

>>>
\begin_inset Quotes erd
\end_inset

.
 The case usage below showing for the remote-object of person, one is accessing
 two layers into it’s fields to retrieve a double value from extra2.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

f :: Double <- person ^.
 nest >>> nest2 >> extra2
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

The normal syntax for this would be represented as the following nested
 structure.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteView (extra3(nest2(nest))) person
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

This expands out fully instantiated and unwrapped in the weeds as a slightly
 harder to read structure, requiring more knowledge of the underlying constructi
on.
 This way of writing code is particularly undesirable, particularly when
 abstractions exist for the purpose of making the legibility easier to the
 trained and untrained reader.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

g <- constructor $ JavaScript $ pack $ (extra3(nest2(nest))) (var_text person)
\end_layout

\begin_layout Plain Layout

procedure $ var g
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

The code shows the virtualization of machinery from each layer to the next
 in this system, and that whilst the syntactical sugar for 
\emph on
RemoteSet
\emph default
 and 
\emph on
RemoteOver
\emph default
 has not been shown, these share the same levels of abstractions.
 For completeness, examples of their basic calling is provided now so that
 one isn't left curious to the reasonable invocations to their Haskell counterpa
rts.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

RemoteSet (extra3(nest2(nest))) 
\begin_inset Quotes eld
\end_inset

4
\begin_inset Quotes erd
\end_inset

 person
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

RemoteOver (extra3(nest2(nest))) (
\backslash
 x -> (x + 1::Double)) person
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
FP Complete Lens Exercise Adapated To 
\emph on
RemoteMonad
\emph default
 And 
\emph on
Remote Lens.
\end_layout

\begin_layout Plain Layout
– For Code Words like RemoteView 
\backslash
texttt{blah} 
\end_layout

\begin_layout Plain Layout
– Not applying them both at the same time.
\end_layout

\begin_layout Plain Layout
– Talk about why these are congruent but not equal, in original math they
 are equal.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is a particularly complete example from the first exercise of Haskell
 lensing from FP Complete, that was subsequently adapted to 
\emph on
RemoteMonad
\emph default
 and 
\emph on
Remote Lens 
\emph default
so that it could be clearly illustrated in long form what some of the major
 similarities and differences might be between remote and local implementations.
 Starting off the simple construction of the 
\begin_inset Quotes eld
\end_inset

lens
\begin_inset Quotes erd
\end_inset

 arguments is provided, in the case of the Javascript back-end this can
 be viewed as using the point-styled object-oriented accessor methods, common
 in non-functional programming languages.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

address objectName = objectName ++ ".address"
\end_layout

\begin_layout Plain Layout

street objectName = objectName ++ ".street"
\end_layout

\begin_layout Plain Layout

city objectName = objectName ++ ".city"
\end_layout

\begin_layout Plain Layout

name objectName = objectName ++ ".name"
\end_layout

\begin_layout Plain Layout

age objectName = objectName ++ ".age" 
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

There is now provided a series of example constructions for normal lens-like
 syntax, particularly constructed calls to view the age of a person as well
 as the street they live on.
 Additionally, a function to modify the street name via a set and a function
 to over the age with an age incrementing argument — are both provided.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

wilshire :: String
\end_layout

\begin_layout Plain Layout

wilshire = "
\backslash
"Wilshire Blvd
\backslash
""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

aliceWilshire :: RemoteValue a -> RemoteMonad (RemoteValue a)
\end_layout

\begin_layout Plain Layout

aliceWilshire newperson = RemoteSet (address >>> street) wilshire newperson
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

getStreet :: RemoteValue a -> (RemoteMonad String)
\end_layout

\begin_layout Plain Layout

getStreet newperson = RemoteView (address >>> street) newperson
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

birthday :: RemoteValue Int -> RemoteMonad (RemoteValue Int)
\end_layout

\begin_layout Plain Layout

birthday newperson = RemoteOver age (
\backslash
 x -> (x + 1::Int)) newperson
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

getAge :: RemoteValue a -> (RemoteMonad Int)
\end_layout

\begin_layout Plain Layout

getAge newperson = RemoteView age newperson
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\begin_layout Plain Layout

%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

The last piece is provided now to show the effective usage of the lens-like
 functions and how they provide a clear flow, with each action they take
 on the client side once the host has sent them over as packets.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
begin{spacing}{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{code}[baselinestretch = 1,xleftmargin=5mm,xrightmargin=5mm,breaklines,brea
kanywhere=true,breakafter=>]
\end_layout

\begin_layout Plain Layout

exercise1 :: Engine -> IO ()
\end_layout

\begin_layout Plain Layout

exercise1 eng = do
\end_layout

\begin_layout Plain Layout

	send eng $ do
\end_layout

\begin_layout Plain Layout

		command $ call "console.log" [string "starting..."]
\end_layout

\begin_layout Plain Layout

		render $ "Exercise1"
\end_layout

\begin_layout Plain Layout

		newperson <- initializeObjectAbstraction2 "alice" alice
\end_layout

\begin_layout Plain Layout

		aliceWilshire newperson
\end_layout

\begin_layout Plain Layout

		mystreet_person <- getStreet newperson
\end_layout

\begin_layout Plain Layout

		birthday newperson
\end_layout

\begin_layout Plain Layout

		herNewAge <- getAge newperson
\end_layout

\begin_layout Plain Layout

		render $ "mystreet_person: " ++ mystreet_person
\end_layout

\begin_layout Plain Layout

		render $ "herNewAge: " ++ show herNewAge
\end_layout

\begin_layout Plain Layout


\backslash
end{code}
\end_layout

\begin_layout Plain Layout


\backslash
end{spacing}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

From the large set of examples, the necessity of making abstractions is
 made clear and the larger case for why Remote Lenses are useful tools,
 whilst it isn't possible to provide every single amenity that the classical
 lenses are able to give programmers.
\end_layout

\end_body
\end_document
